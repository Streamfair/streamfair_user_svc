// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/store.go
//
// Generated by this command:
//
//	mockgen -source=db/sqlc/store.go -destination=db/mock/store_mock.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/Streamfair/streamfair_user_svc/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountTypeToAccount mocks base method.
func (m *MockStore) AddAccountTypeToAccount(ctx context.Context, arg db.AddAccountTypeToAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountTypeToAccount", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountTypeToAccount indicates an expected call of AddAccountTypeToAccount.
func (mr *MockStoreMockRecorder) AddAccountTypeToAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountTypeToAccount", reflect.TypeOf((*MockStore)(nil).AddAccountTypeToAccount), ctx, arg)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.CreateAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(db.CreateAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), ctx, arg)
}

// CreateAccountTx mocks base method.
func (m *MockStore) CreateAccountTx(ctx context.Context, params db.CreateAccountTxParams) (db.CreateAccountTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTx", ctx, params)
	ret0, _ := ret[0].(db.CreateAccountTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTx indicates an expected call of CreateAccountTx.
func (mr *MockStoreMockRecorder) CreateAccountTx(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTx", reflect.TypeOf((*MockStore)(nil).CreateAccountTx), ctx, params)
}

// CreateAccountType mocks base method.
func (m *MockStore) CreateAccountType(ctx context.Context, arg db.CreateAccountTypeParams) (db.UserSvcAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountType", ctx, arg)
	ret0, _ := ret[0].(db.UserSvcAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountType indicates an expected call of CreateAccountType.
func (mr *MockStoreMockRecorder) CreateAccountType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountType", reflect.TypeOf((*MockStore)(nil).CreateAccountType), ctx, arg)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), ctx, id)
}

// DeleteAccountTx mocks base method.
func (m *MockStore) DeleteAccountTx(ctx context.Context, accountID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountTx", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountTx indicates an expected call of DeleteAccountTx.
func (mr *MockStoreMockRecorder) DeleteAccountTx(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountTx", reflect.TypeOf((*MockStore)(nil).DeleteAccountTx), ctx, accountID)
}

// DeleteAccountType mocks base method.
func (m *MockStore) DeleteAccountType(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountType", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountType indicates an expected call of DeleteAccountType.
func (mr *MockStoreMockRecorder) DeleteAccountType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountType", reflect.TypeOf((*MockStore)(nil).DeleteAccountType), ctx, id)
}

// GetAccountByAllParams mocks base method.
func (m *MockStore) GetAccountByAllParams(ctx context.Context, arg db.GetAccountByAllParamsParams) (db.UserSvcAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByAllParams", ctx, arg)
	ret0, _ := ret[0].(db.UserSvcAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByAllParams indicates an expected call of GetAccountByAllParams.
func (mr *MockStoreMockRecorder) GetAccountByAllParams(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByAllParams", reflect.TypeOf((*MockStore)(nil).GetAccountByAllParams), ctx, arg)
}

// GetAccountByID mocks base method.
func (m *MockStore) GetAccountByID(ctx context.Context, id int64) (db.GetAccountByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, id)
	ret0, _ := ret[0].(db.GetAccountByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockStoreMockRecorder) GetAccountByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockStore)(nil).GetAccountByID), ctx, id)
}

// GetAccountByUsername mocks base method.
func (m *MockStore) GetAccountByUsername(ctx context.Context, username string) (db.GetAccountByUsernameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUsername", ctx, username)
	ret0, _ := ret[0].(db.GetAccountByUsernameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUsername indicates an expected call of GetAccountByUsername.
func (mr *MockStoreMockRecorder) GetAccountByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUsername", reflect.TypeOf((*MockStore)(nil).GetAccountByUsername), ctx, username)
}

// GetAccountType mocks base method.
func (m *MockStore) GetAccountType(ctx context.Context, id int64) (db.UserSvcAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountType", ctx, id)
	ret0, _ := ret[0].(db.UserSvcAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountType indicates an expected call of GetAccountType.
func (mr *MockStoreMockRecorder) GetAccountType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountType", reflect.TypeOf((*MockStore)(nil).GetAccountType), ctx, id)
}

// GetAccountTypeByAllParams mocks base method.
func (m *MockStore) GetAccountTypeByAllParams(ctx context.Context, arg db.GetAccountTypeByAllParamsParams) (db.UserSvcAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTypeByAllParams", ctx, arg)
	ret0, _ := ret[0].(db.UserSvcAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTypeByAllParams indicates an expected call of GetAccountTypeByAllParams.
func (mr *MockStoreMockRecorder) GetAccountTypeByAllParams(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTypeByAllParams", reflect.TypeOf((*MockStore)(nil).GetAccountTypeByAllParams), ctx, arg)
}

// GetAccountTypeIDsForAccount mocks base method.
func (m *MockStore) GetAccountTypeIDsForAccount(ctx context.Context, accountsID int64) ([]db.GetAccountTypeIDsForAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTypeIDsForAccount", ctx, accountsID)
	ret0, _ := ret[0].([]db.GetAccountTypeIDsForAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTypeIDsForAccount indicates an expected call of GetAccountTypeIDsForAccount.
func (mr *MockStoreMockRecorder) GetAccountTypeIDsForAccount(ctx, accountsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTypeIDsForAccount", reflect.TypeOf((*MockStore)(nil).GetAccountTypeIDsForAccount), ctx, accountsID)
}

// GetAccountTypesForAccount mocks base method.
func (m *MockStore) GetAccountTypesForAccount(ctx context.Context, accountsID int64) ([]db.UserSvcAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTypesForAccount", ctx, accountsID)
	ret0, _ := ret[0].([]db.UserSvcAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTypesForAccount indicates an expected call of GetAccountTypesForAccount.
func (mr *MockStoreMockRecorder) GetAccountTypesForAccount(ctx, accountsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTypesForAccount", reflect.TypeOf((*MockStore)(nil).GetAccountTypesForAccount), ctx, accountsID)
}

// GetAccountsForAccountType mocks base method.
func (m *MockStore) GetAccountsForAccountType(ctx context.Context, accounttypesID int64) ([]db.GetAccountsForAccountTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsForAccountType", ctx, accounttypesID)
	ret0, _ := ret[0].([]db.GetAccountsForAccountTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsForAccountType indicates an expected call of GetAccountsForAccountType.
func (mr *MockStoreMockRecorder) GetAccountsForAccountType(ctx, accounttypesID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsForAccountType", reflect.TypeOf((*MockStore)(nil).GetAccountsForAccountType), ctx, accounttypesID)
}

// ListAccountTypes mocks base method.
func (m *MockStore) ListAccountTypes(ctx context.Context, arg db.ListAccountTypesParams) ([]db.UserSvcAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountTypes", ctx, arg)
	ret0, _ := ret[0].([]db.UserSvcAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountTypes indicates an expected call of ListAccountTypes.
func (mr *MockStoreMockRecorder) ListAccountTypes(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountTypes", reflect.TypeOf((*MockStore)(nil).ListAccountTypes), ctx, arg)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(ctx context.Context, arg db.ListAccountsParams) ([]db.ListAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, arg)
	ret0, _ := ret[0].([]db.ListAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), ctx, arg)
}

// Ping mocks base method.
func (m *MockStore) Ping(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping), ctx, timeout)
}

// RemoveAccountTypeFromAccount mocks base method.
func (m *MockStore) RemoveAccountTypeFromAccount(ctx context.Context, arg db.RemoveAccountTypeFromAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountTypeFromAccount", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountTypeFromAccount indicates an expected call of RemoveAccountTypeFromAccount.
func (mr *MockStoreMockRecorder) RemoveAccountTypeFromAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountTypeFromAccount", reflect.TypeOf((*MockStore)(nil).RemoveAccountTypeFromAccount), ctx, arg)
}

// RemoveAllRelationshipsForAccountAccountType mocks base method.
func (m *MockStore) RemoveAllRelationshipsForAccountAccountType(ctx context.Context, accountsID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllRelationshipsForAccountAccountType", ctx, accountsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllRelationshipsForAccountAccountType indicates an expected call of RemoveAllRelationshipsForAccountAccountType.
func (mr *MockStoreMockRecorder) RemoveAllRelationshipsForAccountAccountType(ctx, accountsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllRelationshipsForAccountAccountType", reflect.TypeOf((*MockStore)(nil).RemoveAllRelationshipsForAccountAccountType), ctx, accountsID)
}

// RemoveAllRelationshipsForAccountTypeAccount mocks base method.
func (m *MockStore) RemoveAllRelationshipsForAccountTypeAccount(ctx context.Context, accounttypesID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllRelationshipsForAccountTypeAccount", ctx, accounttypesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllRelationshipsForAccountTypeAccount indicates an expected call of RemoveAllRelationshipsForAccountTypeAccount.
func (mr *MockStoreMockRecorder) RemoveAllRelationshipsForAccountTypeAccount(ctx, accounttypesID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllRelationshipsForAccountTypeAccount", reflect.TypeOf((*MockStore)(nil).RemoveAllRelationshipsForAccountTypeAccount), ctx, accounttypesID)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.UpdateAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, arg)
	ret0, _ := ret[0].(db.UpdateAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), ctx, arg)
}

// UpdateAccountPassword mocks base method.
func (m *MockStore) UpdateAccountPassword(ctx context.Context, arg db.UpdateAccountPasswordParams) (db.UpdateAccountPasswordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountPassword", ctx, arg)
	ret0, _ := ret[0].(db.UpdateAccountPasswordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountPassword indicates an expected call of UpdateAccountPassword.
func (mr *MockStoreMockRecorder) UpdateAccountPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountPassword", reflect.TypeOf((*MockStore)(nil).UpdateAccountPassword), ctx, arg)
}

// UpdateAccountType mocks base method.
func (m *MockStore) UpdateAccountType(ctx context.Context, arg db.UpdateAccountTypeParams) (db.UserSvcAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountType", ctx, arg)
	ret0, _ := ret[0].(db.UserSvcAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountType indicates an expected call of UpdateAccountType.
func (mr *MockStoreMockRecorder) UpdateAccountType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountType", reflect.TypeOf((*MockStore)(nil).UpdateAccountType), ctx, arg)
}
