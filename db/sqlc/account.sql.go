// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "user_svc"."Accounts" (
 owner,
 account_type,
 avatar_uri
) VALUES (
 $1, $2, $3
)
RETURNING id, owner, account_type, avatar_uri, created_at, updated_at
`

type CreateAccountParams struct {
	Owner       string      `json:"owner"`
	AccountType int32       `json:"account_type"`
	AvatarUri   pgtype.Text `json:"avatar_uri"`
}

type CreateAccountRow struct {
	ID          int64       `json:"id"`
	Owner       string      `json:"owner"`
	AccountType int32       `json:"account_type"`
	AvatarUri   pgtype.Text `json:"avatar_uri"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Owner, arg.AccountType, arg.AvatarUri)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountType,
		&i.AvatarUri,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "user_svc"."Accounts"
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, account_type, owner, avatar_uri, plays, likes, follows, shares, created_at, updated_at FROM "user_svc"."Accounts"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.Owner,
		&i.AvatarUri,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByOwner = `-- name: GetAccountByOwner :one
SELECT id, account_type, owner, avatar_uri, plays, likes, follows, shares, created_at, updated_at FROM "user_svc"."Accounts"
WHERE owner = $1 LIMIT 1
`

func (q *Queries) GetAccountByOwner(ctx context.Context, owner string) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, getAccountByOwner, owner)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.Owner,
		&i.AvatarUri,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, account_type, created_at, updated_at FROM "user_svc"."Accounts"
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAccountsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListAccountsRow struct {
	ID          int64     `json:"id"`
	Owner       string    `json:"owner"`
	AccountType int32     `json:"account_type"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]ListAccountsRow, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountsRow{}
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "user_svc"."Accounts"
SET
 owner = COALESCE($2, owner),
 account_type = COALESCE($3, account_type),
 avatar_uri = COALESCE($4, avatar_uri),
 plays = COALESCE($5, plays),
 likes = COALESCE($6, likes),
 follows = COALESCE($7, follows),
 shares = COALESCE($8, shares),
 updated_at = NOW()
WHERE id = $1
RETURNING id, account_type, owner, avatar_uri, plays, likes, follows, shares, created_at, updated_at
`

type UpdateAccountParams struct {
	ID          int64       `json:"id"`
	Owner       string      `json:"owner"`
	AccountType int32       `json:"account_type"`
	AvatarUri   pgtype.Text `json:"avatar_uri"`
	Plays       int64       `json:"plays"`
	Likes       int64       `json:"likes"`
	Follows     int64       `json:"follows"`
	Shares      int64       `json:"shares"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Owner,
		arg.AccountType,
		arg.AvatarUri,
		arg.Plays,
		arg.Likes,
		arg.Follows,
		arg.Shares,
	)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.Owner,
		&i.AvatarUri,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
