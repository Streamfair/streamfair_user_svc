// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "user_svc"."Accounts" (
 owner,
 avatar_url
) VALUES (
 $1, $2
)
RETURNING id, owner, avatar_url, created_at, updated_at
`

type CreateAccountParams struct {
	Owner     string      `json:"owner"`
	AvatarUrl pgtype.Text `json:"avatar_url"`
}

type CreateAccountRow struct {
	ID        int64              `json:"id"`
	Owner     string             `json:"owner"`
	AvatarUrl pgtype.Text        `json:"avatar_url"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Owner, arg.AvatarUrl)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec

DELETE FROM "user_svc"."Accounts"
WHERE id = $1
`

// -- name: UpdateAccountPassword :one
// UPDATE "user_svc"."Accounts"
// SET
//
//	password_hash = COALESCE($2, password_hash)
//
// WHERE id = $1
// RETURNING id, username, created_at, updated_at;
func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT
id,
owner,
avatar_url,
plays,
likes,
follows,
shares,
created_at,
updated_at
FROM "user_svc"."Accounts"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AvatarUrl,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByOwner = `-- name: GetAccountByOwner :one
SELECT
id,
owner,
avatar_url,
plays,
likes,
follows,
shares,
created_at,
updated_at
FROM "user_svc"."Accounts"
WHERE owner = $1 LIMIT 1
`

func (q *Queries) GetAccountByOwner(ctx context.Context, owner string) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, getAccountByOwner, owner)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AvatarUrl,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, created_at, updated_at FROM "user_svc"."Accounts"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAccountsRow struct {
	ID        int64              `json:"id"`
	Owner     string             `json:"owner"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]ListAccountsRow, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountsRow{}
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "user_svc"."Accounts"
SET
 owner = COALESCE($2, owner),
 avatar_url = COALESCE($3, avatar_url),
 plays = COALESCE($4, plays),
 likes = COALESCE($5, likes),
 follows = COALESCE($6, follows),
 shares = COALESCE($7, shares),
 updated_at = NOW()
WHERE id = $1
RETURNING id, owner, avatar_url, plays, likes, follows, shares, created_at, updated_at
`

type UpdateAccountParams struct {
	ID        int64       `json:"id"`
	Owner     string      `json:"owner"`
	AvatarUrl pgtype.Text `json:"avatar_url"`
	Plays     int64       `json:"plays"`
	Likes     int64       `json:"likes"`
	Follows   int64       `json:"follows"`
	Shares    int64       `json:"shares"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Owner,
		arg.AvatarUrl,
		arg.Plays,
		arg.Likes,
		arg.Follows,
		arg.Shares,
	)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AvatarUrl,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
