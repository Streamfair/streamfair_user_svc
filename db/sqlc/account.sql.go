// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "user_svc"."Accounts" (
  username,
  email,
  password_hash,
  country_code,
  avatar_url
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, username, email, country_code, created_at, updated_at
`

type CreateAccountParams struct {
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	CountryCode  string      `json:"country_code"`
	AvatarUrl    pgtype.Text `json:"avatar_url"`
}

type CreateAccountRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	Email       string             `json:"email"`
	CountryCode string             `json:"country_code"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.CountryCode,
		arg.AvatarUrl,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CountryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "user_svc"."Accounts"
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByAllParams = `-- name: GetAccountByAllParams :one
SELECT id, username, email, password_hash, country_code, avatar_url, likes_count, follows_count, created_at, updated_at FROM "user_svc"."Accounts"
WHERE username = $1 AND email = $2 AND country_code = $3 AND avatar_url = $4
`

type GetAccountByAllParamsParams struct {
	Username    string      `json:"username"`
	Email       string      `json:"email"`
	CountryCode string      `json:"country_code"`
	AvatarUrl   pgtype.Text `json:"avatar_url"`
}

func (q *Queries) GetAccountByAllParams(ctx context.Context, arg GetAccountByAllParamsParams) (UserSvcAccount, error) {
	row := q.db.QueryRow(ctx, getAccountByAllParams,
		arg.Username,
		arg.Email,
		arg.CountryCode,
		arg.AvatarUrl,
	)
	var i UserSvcAccount
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CountryCode,
		&i.AvatarUrl,
		&i.LikesCount,
		&i.FollowsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT
id,
username,
email, country_code,
avatar_url,
likes_count,
follows_count,
created_at,
updated_at
FROM "user_svc"."Accounts"
WHERE id = $1 LIMIT 1
`

type GetAccountByIDRow struct {
	ID           int64              `json:"id"`
	Username     string             `json:"username"`
	Email        string             `json:"email"`
	CountryCode  string             `json:"country_code"`
	AvatarUrl    pgtype.Text        `json:"avatar_url"`
	LikesCount   int64              `json:"likes_count"`
	FollowsCount int64              `json:"follows_count"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (GetAccountByIDRow, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i GetAccountByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CountryCode,
		&i.AvatarUrl,
		&i.LikesCount,
		&i.FollowsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT
id,
username,
email, country_code,
avatar_url,
likes_count,
follows_count,
created_at,
updated_at
FROM "user_svc"."Accounts"
WHERE username = $1 LIMIT 1
`

type GetAccountByUsernameRow struct {
	ID           int64              `json:"id"`
	Username     string             `json:"username"`
	Email        string             `json:"email"`
	CountryCode  string             `json:"country_code"`
	AvatarUrl    pgtype.Text        `json:"avatar_url"`
	LikesCount   int64              `json:"likes_count"`
	FollowsCount int64              `json:"follows_count"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (GetAccountByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getAccountByUsername, username)
	var i GetAccountByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CountryCode,
		&i.AvatarUrl,
		&i.LikesCount,
		&i.FollowsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, country_code, created_at, updated_at FROM "user_svc"."Accounts"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAccountsRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	CountryCode string             `json:"country_code"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]ListAccountsRow, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAccountsRow{}
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CountryCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "user_svc"."Accounts"
SET
  username = COALESCE($2, username),
  email = COALESCE($3, email),
  country_code = COALESCE($4, country_code),
  avatar_url = COALESCE($5, avatar_url),
  likes_count = COALESCE($6, likes_count),
  follows_count = COALESCE($7, follows_count),
  updated_at = NOW()
WHERE id = $1
RETURNING id, username, country_code, created_at, updated_at
`

type UpdateAccountParams struct {
	ID           int64       `json:"id"`
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	CountryCode  string      `json:"country_code"`
	AvatarUrl    pgtype.Text `json:"avatar_url"`
	LikesCount   int64       `json:"likes_count"`
	FollowsCount int64       `json:"follows_count"`
}

type UpdateAccountRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	CountryCode string             `json:"country_code"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.CountryCode,
		arg.AvatarUrl,
		arg.LikesCount,
		arg.FollowsCount,
	)
	var i UpdateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CountryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :one
UPDATE "user_svc"."Accounts"
SET
  password_hash = COALESCE($2, password_hash)
WHERE id = $1
RETURNING id, username, created_at, updated_at
`

type UpdateAccountPasswordParams struct {
	ID           int64  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

type UpdateAccountPasswordRow struct {
	ID        int64              `json:"id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) (UpdateAccountPasswordRow, error) {
	row := q.db.QueryRow(ctx, updateAccountPassword, arg.ID, arg.PasswordHash)
	var i UpdateAccountPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
