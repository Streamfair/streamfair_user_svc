// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user_svc"."Users" (
 username,
 full_name,
 email,
 password_hash,
 password_salt,
 country_code,
 role_id,
 status
) VALUES (
 $1, $2, $3, $4, $5 , $6, $7, $8
)
RETURNING id, username, full_name, email, password_hash, password_salt, country_code, role_id, status, last_login_at, username_changed_at, email_changed_at, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	Username     string      `json:"username"`
	FullName     string      `json:"full_name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	PasswordSalt string      `json:"password_salt"`
	CountryCode  string      `json:"country_code"`
	RoleID       pgtype.Int8 `json:"role_id"`
	Status       pgtype.Text `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserSvcUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.PasswordHash,
		arg.PasswordSalt,
		arg.CountryCode,
		arg.RoleID,
		arg.Status,
	)
	var i UserSvcUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CountryCode,
		&i.RoleID,
		&i.Status,
		&i.LastLoginAt,
		&i.UsernameChangedAt,
		&i.EmailChangedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user_svc"."Users"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, full_name, email, password_hash, password_salt, country_code, role_id, status, last_login_at, username_changed_at, email_changed_at, password_changed_at, created_at, updated_at FROM "user_svc"."Users"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (UserSvcUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i UserSvcUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CountryCode,
		&i.RoleID,
		&i.Status,
		&i.LastLoginAt,
		&i.UsernameChangedAt,
		&i.EmailChangedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, full_name, email, password_hash, password_salt, country_code, role_id, status, last_login_at, username_changed_at, email_changed_at, password_changed_at, created_at, updated_at FROM "user_svc"."Users"
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (UserSvcUser, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i UserSvcUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CountryCode,
		&i.RoleID,
		&i.Status,
		&i.LastLoginAt,
		&i.UsernameChangedAt,
		&i.EmailChangedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
 id,
 username,
 full_name,
 email,
 country_code,
 role_id,
 status,
 last_login_at,
 created_at,
 updated_at
FROM "user_svc"."Users"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID          int64       `json:"id"`
	Username    string      `json:"username"`
	FullName    string      `json:"full_name"`
	Email       string      `json:"email"`
	CountryCode string      `json:"country_code"`
	RoleID      pgtype.Int8 `json:"role_id"`
	Status      pgtype.Text `json:"status"`
	LastLoginAt time.Time   `json:"last_login_at"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.CountryCode,
			&i.RoleID,
			&i.Status,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user_svc"."Users"
SET username = COALESCE($2, username),
    full_name = COALESCE($3, full_name),
    country_code = COALESCE($4, country_code),
    role_id = COALESCE($5, role_id),
    status = COALESCE($6, status),
    updated_at = NOW()
WHERE id = $1
RETURNING username, full_name, country_code, role_id, status, last_login_at, updated_at
`

type UpdateUserParams struct {
	ID          int64       `json:"id"`
	Username    string      `json:"username"`
	FullName    string      `json:"full_name"`
	CountryCode string      `json:"country_code"`
	RoleID      pgtype.Int8 `json:"role_id"`
	Status      pgtype.Text `json:"status"`
}

type UpdateUserRow struct {
	Username    string      `json:"username"`
	FullName    string      `json:"full_name"`
	CountryCode string      `json:"country_code"`
	RoleID      pgtype.Int8 `json:"role_id"`
	Status      pgtype.Text `json:"status"`
	LastLoginAt time.Time   `json:"last_login_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.CountryCode,
		arg.RoleID,
		arg.Status,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.CountryCode,
		&i.RoleID,
		&i.Status,
		&i.LastLoginAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE "user_svc"."Users"
SET email = COALESCE($2, email),
    email_changed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING email, email_changed_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

type UpdateUserEmailRow struct {
	Email          string    `json:"email"`
	EmailChangedAt time.Time `json:"email_changed_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (UpdateUserEmailRow, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i UpdateUserEmailRow
	err := row.Scan(&i.Email, &i.EmailChangedAt, &i.UpdatedAt)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE "user_svc"."Users"
SET password_hash = COALESCE($2, password_hash),
    password_salt = COALESCE($3, password_salt),
    password_changed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING password_hash, password_salt, password_changed_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID           int64  `json:"id"`
	PasswordHash string `json:"password_hash"`
	PasswordSalt string `json:"password_salt"`
}

type UpdateUserPasswordRow struct {
	PasswordHash      string    `json:"password_hash"`
	PasswordSalt      string    `json:"password_salt"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (UpdateUserPasswordRow, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordHash, arg.PasswordSalt)
	var i UpdateUserPasswordRow
	err := row.Scan(
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.PasswordChangedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE "user_svc"."Users"
SET username = COALESCE($2, username),
    username_changed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING username, username_changed_at, updated_at
`

type UpdateUsernameParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

type UpdateUsernameRow struct {
	Username          string    `json:"username"`
	UsernameChangedAt time.Time `json:"username_changed_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (UpdateUsernameRow, error) {
	row := q.db.QueryRow(ctx, updateUsername, arg.ID, arg.Username)
	var i UpdateUsernameRow
	err := row.Scan(&i.Username, &i.UsernameChangedAt, &i.UpdatedAt)
	return i, err
}
