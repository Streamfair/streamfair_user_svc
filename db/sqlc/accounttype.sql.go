// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accounttype.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountType = `-- name: CreateAccountType :one
INSERT INTO "user_service"."AccountTypes" (
  description,
  permissions,
  is_artist,
  is_producer,
  is_writer,
  is_label
) VALUES (
 $1, $2, $3, $4, $5, $6
)
RETURNING id, description, permissions, is_artist, is_producer, is_writer, is_label, created_at, updated_at
`

type CreateAccountTypeParams struct {
	Description pgtype.Text `json:"description"`
	Permissions []byte      `json:"permissions"`
	IsArtist    bool        `json:"is_artist"`
	IsProducer  bool        `json:"is_producer"`
	IsWriter    bool        `json:"is_writer"`
	IsLabel     bool        `json:"is_label"`
}

func (q *Queries) CreateAccountType(ctx context.Context, arg CreateAccountTypeParams) (UserServiceAccountType, error) {
	row := q.db.QueryRow(ctx, createAccountType,
		arg.Description,
		arg.Permissions,
		arg.IsArtist,
		arg.IsProducer,
		arg.IsWriter,
		arg.IsLabel,
	)
	var i UserServiceAccountType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountType = `-- name: DeleteAccountType :exec
DELETE FROM "user_service"."AccountTypes"
WHERE id = $1
`

func (q *Queries) DeleteAccountType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccountType, id)
	return err
}

const getAccountType = `-- name: GetAccountType :one
SELECT id, description, permissions, is_artist, is_producer, is_writer, is_label, created_at, updated_at FROM "user_service"."AccountTypes"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountType(ctx context.Context, id int64) (UserServiceAccountType, error) {
	row := q.db.QueryRow(ctx, getAccountType, id)
	var i UserServiceAccountType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountTypeByAllParams = `-- name: GetAccountTypeByAllParams :one
SELECT id, description, permissions, is_artist, is_producer, is_writer, is_label, created_at, updated_at FROM "user_service"."AccountTypes"
WHERE description = $1 AND permissions = $2 AND is_artist = $3 AND is_producer = $4 AND is_writer = $5 AND is_label = $6 LIMIT 1
`

type GetAccountTypeByAllParamsParams struct {
	Description pgtype.Text `json:"description"`
	Permissions []byte      `json:"permissions"`
	IsArtist    bool        `json:"is_artist"`
	IsProducer  bool        `json:"is_producer"`
	IsWriter    bool        `json:"is_writer"`
	IsLabel     bool        `json:"is_label"`
}

func (q *Queries) GetAccountTypeByAllParams(ctx context.Context, arg GetAccountTypeByAllParamsParams) (UserServiceAccountType, error) {
	row := q.db.QueryRow(ctx, getAccountTypeByAllParams,
		arg.Description,
		arg.Permissions,
		arg.IsArtist,
		arg.IsProducer,
		arg.IsWriter,
		arg.IsLabel,
	)
	var i UserServiceAccountType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccountTypes = `-- name: ListAccountTypes :many
SELECT id, description, permissions, is_artist, is_producer, is_writer, is_label, created_at, updated_at FROM "user_service"."AccountTypes"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccountTypes(ctx context.Context, arg ListAccountTypesParams) ([]UserServiceAccountType, error) {
	rows, err := q.db.Query(ctx, listAccountTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserServiceAccountType{}
	for rows.Next() {
		var i UserServiceAccountType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountType = `-- name: UpdateAccountType :one
UPDATE "user_service"."AccountTypes"
SET 
  description = COALESCE($2, description),
  permissions = COALESCE($3, permissions),
  is_artist = COALESCE($4, is_artist),
  is_producer = COALESCE($5, is_producer),
  is_writer = COALESCE($6, is_writer),
  is_label = COALESCE($7, is_label),
  updated_at = NOW()
WHERE id = $1
RETURNING id, description, permissions, is_artist, is_producer, is_writer, is_label, created_at, updated_at
`

type UpdateAccountTypeParams struct {
	ID          int64       `json:"id"`
	Description pgtype.Text `json:"description"`
	Permissions []byte      `json:"permissions"`
	IsArtist    bool        `json:"is_artist"`
	IsProducer  bool        `json:"is_producer"`
	IsWriter    bool        `json:"is_writer"`
	IsLabel     bool        `json:"is_label"`
}

func (q *Queries) UpdateAccountType(ctx context.Context, arg UpdateAccountTypeParams) (UserServiceAccountType, error) {
	row := q.db.QueryRow(ctx, updateAccountType,
		arg.ID,
		arg.Description,
		arg.Permissions,
		arg.IsArtist,
		arg.IsProducer,
		arg.IsWriter,
		arg.IsLabel,
	)
	var i UserServiceAccountType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
